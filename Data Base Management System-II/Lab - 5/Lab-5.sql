-- Creating PersonInfo Table 
CREATE TABLE PersonInfo ( 
PersonID INT PRIMARY KEY, 
PersonName VARCHAR(100) NOT NULL, 
Salary DECIMAL(8,2) NOT NULL, 
JoiningDate DATETIME NULL, 
City VARCHAR(100) NOT NULL, 
Age INT NULL, 
BirthDate DATETIME NOT NULL 
); 

-- Creating PersonLog Table 
CREATE TABLE PersonLog ( 
PLogID INT PRIMARY KEY IDENTITY(1,1), 
PersonID INT NOT NULL, 
PersonName VARCHAR(250) NOT NULL, 
Operation VARCHAR(50) NOT NULL, 
UpdateDate DATETIME NOT NULL
);

--Part – A 
--1. Create a trigger that fires on INSERT, UPDATE and DELETE operation on the PersonInfo table to display 
--a message “Record is Affected.” 
CREATE TRIGGER TR_PERSONINFO_DMLOPRATION
ON PERSONINFO
AFTER INSERT,UPDATE,DELETE
AS
BEGIN
	PRINT 'Record is Affected.'
END

INSERT INTO PERSONINFO VALUES(110,'ABCD',10000,NULL,'MORBI',28,'2001-05-20')
SELECT * FROM PersonInfo

DROP TRIGGER TR_PERSONINFO_DMLOPRATION

--2. Create a trigger that fires on INSERT, UPDATE and DELETE operation on the PersonInfo table. For that, 
--log all operations performed on the person table into PersonLog. 
--FOR INSERT
CREATE TRIGGER TR_PERSONLOG_INSERT
ON PERSONINFO
AFTER INSERT
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(100)

	SELECT @PERSONID = PERSONID , @PERSONNAME = PERSONNAME
	FROM INSERTED

	INSERT INTO PERSONLOG 
	VALUES(@PERSONID,@PERSONNAME,'INSERT',GETDATE())
END

INSERT INTO PERSONINFO VALUES(103,'ABC',10000,'2024-02-12','MORBI',23,'2001-05-20')
SELECT * FROM PersonInfo
SELECT * FROM PersonLog

DROP TRIGGER TR_PERSONLOG_INSERT

--FOR UPDATE
CREATE TRIGGER TR_PERSONLOG_UPDATE
ON PERSONINFO
AFTER UPDATE
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(100)

	SELECT @PERSONID = PERSONID , @PERSONNAME = PERSONNAME
	FROM INSERTED

	INSERT INTO PERSONLOG 
	VALUES(@PERSONID,@PERSONNAME,'UPDATE',GETDATE())
END

UPDATE PersonInfo
SET PersonName = 'DFG'
WHERE PERSONID = 102

DROP TRIGGER TR_PERSONLOG_UPDATE

--FOR DELETE
CREATE TRIGGER TR_PERSONLOG_DELETE
ON PERSONINFO
AFTER DELETE
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(100)

	SELECT @PERSONID = PERSONID , @PERSONNAME = PERSONNAME
	FROM DELETED

	INSERT INTO PERSONLOG 
	VALUES(@PERSONID,@PERSONNAME,'DELETE',GETDATE())
END

DELETE FROM PersonInfo
WHERE PersonID = 101

DROP TRIGGER TR_PERSONLOG_DELETE

--3. Create an INSTEAD OF trigger that fires on INSERT, UPDATE and DELETE operation on the PersonInfo 
--table. For that, log all operations performed on the person table into PersonLog. 
--FOR INSERT
CREATE TRIGGER TR_PERSONLOG_INSERT_INSTEAD
ON PERSONINFO
INSTEAD OF INSERT
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(100)

	SELECT @PERSONID = PERSONID , @PERSONNAME = PERSONNAME
	FROM INSERTED

	INSERT INTO PERSONLOG 
	VALUES(@PERSONID,@PERSONNAME,'INSERT',GETDATE())
END

INSERT INTO PERSONINFO VALUES(105,'RIYA',10000,'2024-02-12','MORBI',23,'2001-05-20')
SELECT * FROM PersonInfo
SELECT * FROM PersonLog

DROP TRIGGER TR_PERSONLOG_INSERT_INSTEAD

--FOR UPDATE
CREATE TRIGGER TR_PERSONLOG_UPDATE_INSTEAD
ON PERSONINFO
INSTEAD OF UPDATE
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(100)

	SELECT @PERSONID = PERSONID , @PERSONNAME = PERSONNAME
	FROM INSERTED

	INSERT INTO PERSONLOG 
	VALUES(@PERSONID,@PERSONNAME,'UPDATE',GETDATE())
END

UPDATE PersonInfo
SET PersonName = 'DARSHI'
WHERE PERSONID = 102

DROP TRIGGER TR_PERSONLOG_UPDATE_INSTEAD

--FOR DELETE
CREATE TRIGGER TR_PERSONLOG_DELETE_INSTEAD 
ON PERSONINFO
INSTEAD OF DELETE
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(100)

	SELECT @PERSONID = PERSONID , @PERSONNAME = PERSONNAME
	FROM DELETED

	INSERT INTO PERSONLOG 
	VALUES(@PERSONID,@PERSONNAME,'DELETE',GETDATE())
END

DELETE FROM PersonInfo
WHERE PersonID = 102

DROP TRIGGER TR_PERSONLOG_DELETE_INSTEAD

--4. Create a trigger that fires on INSERT operation on the PersonInfo table to convert person name into 
--uppercase whenever the record is inserted. 
CREATE TRIGGER TR_PERSONINFO_INSERT
ON PERSONINFO
AFTER INSERT
AS
BEGIN
	DECLARE @PERSONID INT,@PERSONNAME VARCHAR(100)

	SELECT @PERSONID = PERSONID , @PERSONNAME = PERSONNAME
	FROM INSERTED

	UPDATE PersonInfo
	SET PERSONNAME = UPPER(@PERSONNAME)
	WHERE PersonID = @PERSONID
END

INSERT INTO PERSONINFO VALUES(107,'mansi',20000,'2024-02-12','MORBI',23,'2001-05-20')
SELECT * FROM PersonInfo

DROP TRIGGER TR_PERSONINFO_INSERT

--5. Create trigger that prevent duplicate entries of person name on PersonInfo table.
CREATE TRIGGER TR_PERSONINFO_PREVENT_DUPLICATE
ON PERSONINFO
INSTEAD OF INSERT
AS
BEGIN
	INSERT INTO PersonInfo
	SELECT 
		PersonId,
		PersonName,
		Salary,
		JoiningDate,
		City,
		Age,
		BirthDate
	FROM INSERTED
	WHERE PersonName NOT IN (SELECT PersonName FROM PersonInfo)
END

INSERT INTO PERSONINFO VALUES(108,'mansi',20000,'2024-02-12','MORBI',23,'2001-05-20')

DROP TRIGGER TR_PERSONINFO_PREVENT_DUPLICATE

--6. Create trigger that prevent Age below 18 years.
CREATE TRIGGER TR_PERSONINFO_PREVENT_AGE
ON PERSONINFO
INSTEAD OF INSERT
AS
BEGIN
	INSERT INTO PersonInfo
	SELECT 
		PersonId,
		PersonName,
		Salary,
		JoiningDate,
		City,
		Age,
		BirthDate
	FROM INSERTED
	WHERE AGE > 18
END

INSERT INTO PERSONINFO VALUES(108,'NANDU',200,'2024-02-12','MORBI',20,'2004-02-12')

DROP TRIGGER TR_PERSONINFO_PREVENT_AGE


--Part – B 
--7. Create a trigger that fires on INSERT operation on person table, which calculates the age and update 
--that age in Person table. 
CREATE TRIGGER TR_PERSONINFO_CAL_AGE
ON PERSONINFO
AFTER UPDATE
AS
BEGIN
	DECLARE @PERSONID INT ,
			@BIRTHDATE DATETIME,
			@AGE INT

	SELECT 
		@PERSONID = PersonId,
		@BIRTHDATE = BIRTHDATE,
		@AGE = DATEDIFF(YEAR,@BIRTHDATE,GETDATE())
	FROM INSERTED

	UPDATE PersonInfo
	SET AGE = @AGE
	WHERE PersonID = @PERSONID
END

INSERT INTO PERSONINFO VALUES(108,'NANDU',200,'2024-02-12','MORBI',15,'2005-02-12')

DROP TRIGGER TR_PERSONINFO_CAL_AGE

--8. Create a Trigger to Limit Salary Decrease by a 10%. 
CREATE TRIGGER TR_SALARY_DECREASE
ON PERSONINFO
AFTER UPDATE
AS
BEGIN
	DECLARE @OLDSALARY DECIMAL(8,2),@NEWSALARY DECIMAL(8,2),@PERSONID INT
	
	SELECT @OLDSALARY = SALARY FROM DELETED
	SELECT @NEWSALARY = SALARY , @PERSONID = PERSONID FROM INSERTED

	IF @NEWSALARY = @OLDSALARY * 0.9
	BEGIN
		UPDATE PersonInfo
		SET Salary = @OLDSALARY
		WHERE PersonID = @PERSONID
	END
END

DROP TRIGGER TR_PERSONINFO_CAL_AGE

--Part – C  
--9. Create Trigger to Automatically Update JoiningDate to Current Date on INSERT if JoiningDate is NULL 
--during an INSERT. 
CREATE TRIGGER TR_UPDATE_JDATE
ON PERSONINFO
AFTER INSERT
AS
BEGIN
	DECLARE @JDATE DATETIME,@PERSONID INT
	
	SELECT @JDATE = JoiningDate ,@PERSONID = PersonID FROM PersonInfo
	WHERE JoiningDate IS NULL 

	UPDATE PersonInfo
	SET JoiningDate = GETDATE()
	WHERE PersonID = @PERSONID

END

INSERT INTO PersonInfo VALUES(115,'WXYZ',12000,NULL,'JAMNAGAR',25,'2020-1-19')

SELECT * FROM PersonInfo

DROP TRIGGER TR_UPDATE_JDATE

--10. Create DELETE trigger on PersonLog table, when we delete any record of PersonLog table it prints 
--‘Record deleted successfully from PersonLog’.
CREATE TRIGGER TR_PERSONLOG_LOGMSG_DELETE
ON PERSONLOG
AFTER DELETE
AS
BEGIN
	DECLARE @PLOGID INT

	SELECT @PLOGID = PLOGID FROM PersonLog

	DELETE FROM PersonLog
	WHERE PLogID = @PLOGID

	PRINT 'Record deleted successfully from PersonLog'

END

DELETE FROM PersonLog WHERE PLogID = 8

SELECT * FROM PersonLog

DROP TRIGGER TR_PERSONLOG_LOGMSG_DELETE
